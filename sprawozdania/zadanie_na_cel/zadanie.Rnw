\documentclass[12pt]{mwart}
\usepackage[left=1.8cm, right=1.8cm, top=1.8cm, bottom=1.8cm]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{listings}
\usepackage{mathtools, amsthm, amssymb, amsmath}
\usepackage[plmath]{polski}
\usepackage{hyperref}
\usepackage{enumitem}
\usepackage{rotating}
\DeclareMathOperator{\E}{\text{E}}
\DeclareMathOperator{\Var}{\text{Var}}
\date{\today}
\title{Zadanie na ocenę celującą}
\author{Piotr Zieleń}
<<echo=F>>=
pdf.options(encoding="CP1250")
@
\begin{document}
	\maketitle
	\section{Wstęp}
	Celem pracy jest symulacyjne porównanie testu Cochrana, dotyczącego jednorodności prawdopodobieństw sukcesu niezależnych zmiennych losowych z rozkładu dwumianowego, z innymi z zaproponowanych testów, w artykule ,,Park2019''.
	
	W drugim rozdziale zaprezentuję problem, jakiego dotyczy praca. W trzeciej części przedstawię procedurę testowania jednorodności $k$ zmiennych losowych z rozkładu Bernoulliego, dla klasycznej wersji testu Cochrana oraz moją implementację testu w pakiecie R. W rozdziale czwartym \pauza procedurę testowania dla modyfikacji testu Cochrana wraz z implementacją. W rozdziale piątym \pauza procedurę testowania dla nowego testu. Następnie w przedostatniej części pracy \pauza symulacje, dla której porównam test Cochrana w jego klasycznej wersji, z modyfikacją testu Cochrana i nowym testem, a w ostatniej części \pauza wnioski.
	\section{Problem}
	Problem sprowadza się do testowania jednorodności prawdopodobieństwa sukcesu dla $k$ niezależnych zmiennych losowych z rozkładu dwumianowego $(X\sim\mathcal{B}(n, \pi))$. Liczba prób oraz prawdopodobieństwa sukcesu mogą być różne dla rozważanych zmiennych losowych.\newline\noindent
	Niech $X_i\sim\mathcal{B}(n_i, \pi_i)$, gdzie $1\leq i\leq k$, wtedy
	hipoteza zerowa dla $k$ niezależnych zmiennych losowych jest wyrażona następująco:
	\begin{equation}
		H_0: \pi_1=\pi_2=\dots=\pi_k\equiv\pi
	\end{equation}
	\section{Test Cochrana}
	Statystyka testowa w teście Cochrana wyrażona jest wzorem:
	\begin{equation}\label{eq:cochran}
		T_s=\sum_{i=1}^k\frac{\left(X_i-n_i\hat{\pi}\right)^2}{n_i\hat\pi\left(1-\hat\pi\right)},
	\end{equation}
	gdzie $\hat\pi=\frac{\sum_{i=1}^kX_i}{\sum_{i=1}^kn_i}$. Dla prawdziwej hipotezy zerowej, statystyka testowa $T_s$ ma w przybliżeniu rozkład chi{\dywiz}kwadrat z $(k-1)$ stopniami swobody. Hipotezę zerową $H_0$ odrzucamy wtedy, gdy $T_s > \chi^2_{1-\alpha, k-1}$, gdzie $\chi^2_{1-\alpha, k-1}$, to kwantyl rzędu $1-\alpha$ rozkładu chi{\dywiz}kwadrat z $(k-1)$ stopniami swobody. Autorzy artykułu zwrócili jeszcze uwagę, że gdy $k$ jest stosunkowo duże, to statystykę $\frac{T_s-k}{\sqrt{2k}}$ można przybliżać rozkładem $\mathcal{N}(0, 1)$.
	\subsection{Implementacja w pakiecie R}\label{section:cochran_test}
	Poniżej przedstawiłem swoją implementację testu klasycznej wersji testu Cochrana, w pakiecie R:
	<<>>=
	cochran_test <- function(Xi, ni, alfa=0.05){
		k <- length(Xi)
		pi_est <- sum(Xi)/sum(ni)
		Ts <- sum((Xi-ni*pi_est)^2/(ni*pi_est*(1 - pi_est)))
		Ts < qchisq(1-alfa, k-1)
	}
	@
	\noindent Funkcja \verb|cochran_test| przyjmuje jako argumenty:
	\begin{itemize}[label=$\bullet$]
		\item \verb|Xi| \pauza wektor realizacji zmiennych losowych z rozkładu dwumianowego;
		\item \verb|ni| \pauza wektor ilości prób w wyżej wymienionych realizacjach zmiennych losowych (parametry $n_i$ w zmiennych losowych $X_i\sim\mathcal{B}(n_i, \pi_i)$);
		\item \verb|alfa| \pauza poziom istotności (argument opcjonalny, domyślnie wartość 0.05)
	\end{itemize}
	\section{Modyfikacja testu Cochrana}
	Statystyka testowa dana jest wzorem (\ref{eq:cochran}). Hipotezę zerową odrzucamy wtedy, gdy:
	\begin{equation}
		\frac{T_s-k}{\sqrt{\hat{\mathcal{B}}_{0k}}}>z_{1-\alpha},
	\end{equation}
	gdzie:
	\begin{itemize}[label=$\bullet$]
		\item $z_{1-\alpha}$ to kwantyl rzędu $1-\alpha$, rozkładu standardowego normalnego;
		\item $\hat{\mathcal{B}}_{0k}=\sum_{i=1}^k\left(2-\frac{6}{n_i}+\frac{1}{n_i\hat{\overline\pi}(1-\hat{\overline\pi})}\right)$;
		\item $\hat{\overline\pi}=\frac{\sum_{i=1}^kn_i\hat\pi_i}{N}$
		\item $\hat\pi=\frac{\sum_{i=1}^kX_i}{\sum_{i=1}^kn_i}$
		\item $N=\sum_{i=1}^kn_i$
	\end{itemize}
	\subsection{Implemetacja w pakiecie R}
	Poniżej przedstawiłem swoją implemetację testu Cochrana w wersji zmodyfikowanej, w pakiecie R:
	<<>>=
	modified_cochran <- function(Xi, ni, alfa=0.05){
		k <- length(Xi)
		pi_est <- sum(Xi)/sum(ni)
		Ts <- (Xi-ni*pi_est)^2/(ni*pi_est*(1 - pi_est))
		overline_pi <- 1/sum(ni)*sum(ni * pi_est)
		B0k <- sum(2 - 6/ni + 1/(ni*overline_pi*(1-overline_pi)))
		ETs <- mean(Ts)
		VarTs <- var(Ts)
		T0 <- (sum(Ts) - k)/sqrt(B0k)
		T0 < qnorm(1-alfa)
	}
	@
	Funkcja \verb|modified_cochran| przyjmuje dokładnie takie same argumenty jak funkcja \verb|cochran_test| (opisane w pozrozdziale (\ref{section:cochran_test})).
	\section{Nowy test}
	W artykule został zaproponowany jeszcze nowy test w dwóch wersjach \pauza oparty na dwóch różnych estymatorach. Hipotezę zerową dla tego testu odrzucamy, gdy:
	\begin{equation}
		T_{\text{new1}}(\text{lub}\;T_{\text{new2}})>z_{1-\alpha}
	\end{equation}
	gdzie $z_{1-\alpha}$ to kwantyl rzędu $1-\alpha$ rozkładu $\mathcal{N}(0, 1)$. Poniżej przedstawiłem w punktach obliczenia jakie należy wykonać, aby wyznaczyć statystyki $T_{\text{new1}}$ i $T_{\text{new2}}$:
	\begin{itemize}[label=$\bullet$]
		\item $T_{\text{new1}}=\frac{T}{\sqrt{\hat{\mathcal V}_1}}$, $T_{\text{new2}}=\frac{T}{\sqrt{\hat{\mathcal V}_{1, *}}}$
		\item $\hat{\mathcal V}_1=\displaystyle{\sum_{i=1}^k}\displaystyle{\sum_{l=1}^4}=a_{li}\hat{\eta}_{li}$, gdzie $\hat{\eta}_{li}=\frac{n^l_i}{\prod_{j=0}^{l-1}(n_i-j)}\displaystyle{\prod_{j=0}^{l-1}}\left(\hat{\pi}_i-\frac{j}{n_i}\right)$ dla $l=1,2,3,4$ oraz $a_{1i}=\mathcal{A}_{2i},\; a_{2i}=\mathcal{A}_{1i}-\mathcal{A}_{2i},\; a_{3i}=-2\mathcal{A}_{1i},\; a_{4i}=\mathcal{A}_{1i}$\newline\noindent
		$\hat{\mathcal V}_{1*}=\displaystyle{\sum_{i=1}^k}\displaystyle{\sum_{l=1}^4}=a_{li}\hat{\eta}_{l}$, gdzie $\hat{\eta}_{l}=\frac{N^l}{\prod_{j=0}^{l}(N-j)}\displaystyle{\prod_{j=0}^{l-1}}\left(\hat{\pi}-\frac{j}{N}\right)$ dla $l=1,2,3,4$ oraz $a_{li}$ jak wyżej
		\item $T=\displaystyle{\sum_{i=1}^kn_i(\hat{\pi}_i - \hat{\overline{\pi}})^2} - \displaystyle{\sum_{i=1}^kd_i\hat{\pi}_i(1-\hat{\pi}_i)}$
		\item $d_i=\frac{n_ic_i}{n_i-1}$
		\item $c_i=\left(1-\frac{n_i}{N}\right)$
	\end{itemize} 
	\subsection{Implementacja testu $T_{\text{new2}}$ w pakiecie R}
	<<>>=
	c_i <- function(ni, index){
		1 - ni[index]/sum(ni)
	}
	
	d_i <- function(ni, index){
		(ni[index]*c_i(ni, index))/(ni[index] - 1)
	}
	
	hat_pi_i <- function(data, ni, index){
		data[index]/ni[index]
	}
	
	hat_overline_pi2 <- function(data, ni){
		hat_pi <- data/ni
		sum(ni * hat_pi)/sum(ni)
	}
	
	T <- function(data, ni){
		len <- 1:length(data)
		sum(ni * (hat_pi_i(data, ni, len) -
		hat_overline_pi2(data, ni))^2) - 
		sum(d_i(ni, len) * hat_pi_i(data, ni, len) *
		(rep(1, length(data)) - hat_pi_i(data, ni, len)))
	}
	
	A_1i <- function(ni, index){
		2 - 6/ni[index] - di(ni, index)^2/ni[index] +
		(8*di(ni, index)^2)/ni[index]^2 - (6*di(ni, index)^2)/ni[index]^3 +
		12*di(ni, index)*(ni[index] - 1)/ni[index]^2
	}
	
	di <- function(ni, index){
		ni[index]/(ni[index] - 1) * (1 - ni[index]/sum(ni))
	}
	
	A_2i <- function(ni, index){
		ni[index]/sum(ni)^2
	}
	
	a_li <- function(l, ni, index){
		if (l==1){
			A_2i(ni, index)
		} else if (l==2){
			A_1i(ni, index) - A_2i(ni, index)
		} else if (l==3){
			-2*A_1i(ni, index)
		} else if (l==4){
			A_1i(ni, index)
		}
	}
	
	eta2 <- function(data, ni, l){
		N <- sum(ni)
		hat_pi <- 1/N * sum(ni * hat_pi_i(data, ni, 1:length(data)))
		N^l/(prod(rep(N, l) - 0:(l-1))) * prod(rep(hat_pi, l) - 0:(l-1)/N)
	}
	
	V1_gwiazdka <- function(data, ni){
		k <- length(data)
		suma1 <- 0
		sum(sapply(1:k, function(i){
			sum(sapply(1:4, function(j){
				a_li(j, ni, i) * eta2(data, ni, j)
			}))
		}))
	}
	
	T_new2 <- function(data, ni){
		T(data, ni)/sqrt(V1_gwiazdka(data, ni)) < qnorm(0.95)
	}
	@
	
	\section{Symulacje}
	W tym rozdziale przedstawię przeprowadzone symulacje. Przeprowadziłem wszystkie dziesięć symulacji z artykułu dla testu Cochrana, jego zmodyfikowanej wersji i testu $T_{\text{new2}}$ dla $10^4$ powtórzeń. Kod do symulacji przedstawiłem tylko w przypadku pierwszej symulacji. W kolejnych przypadkach kody wyglądały analogicznie. 
	\subsection{Setup 1}\label{section:setup1}
	\noindent$\pi_i=0.001$ dla $1\leq i\leq k$, $\pi_k=0.001+\delta$, k=8\newline
	$\mathbf{n}_8=20(2, 2^2, 2^3, 2^4, 2^5, 2^6, 2^7, 2^8)$:
	<<cache=TRUE>>=
	n8 <- 20*c(2, 2^2, 2^3, 2^4, 2^5, 2^6, 2^7, 2^8)
	result_cochran <- c()
	result_mod_cochran <- c()
	result_tnew2 <- c()
	for (j in 1:10){
		Y <- NA
		while (is.na(mean(Y))){
		Y <- sapply(1:10000, function(...){
			pi <- c(0.001, 0.001, 0.001, 0.001,
			0.001, 0.001, 0.001, 0.001 * j)
		random_variables <- c()
		for (i in 1:8){
			random_variables <- c(random_variables,
			rbinom(1, n8[i], pi[i]))
		}
		c(cochran_test(random_variables, n8),
		modified_cochran(random_variables, n8),
		T_new2(random_variables, n8))
		})
		}
		result_cochran <- c(result_cochran, 1 - mean(Y[1,]))
		result_mod_cochran <- c(result_mod_cochran, 1 - mean(Y[2,]))
		result_tnew2 <- c(result_tnew2, 1 - mean(Y[3,]))
	}
	
	
	df <- data.frame(seq(0.000, 0.009, by=0.001),
	result_cochran, result_mod_cochran, result_tnew2)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 2}
	\noindent(w tym przypadku, w porównaniu do artykułu, zrobiłem mały wyjątek \pauza $\delta$ zwiększam o 0.001, zamiast o 0.01)\newline
	\noindent$\pi_i=0.001+\delta$, dla $k=1$, $\pi_i=0.001$, dla $2\leq i\leq k$, dla $k=8$ i $\mathbf{n}_8$ \pauza tak jak w (\ref{section:setup1}):
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(2, 2^2, 2^3, 2^4, 2^5, 2^6, 2^7, 2^8)
	result_cochran1 <- c()
	result_mod_cochran1 <- c()
	result_tnew21 <- c()
	for (j in 1:10){
		Y <- NA
		while (is.na(mean(Y))){
			Y <- sapply(1:10000, function(...){
				pi <- c(0.001 + 0.001*(j-1), 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
		random_variables <- c()
		for (i in 1:8){
			random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
		}
		cochran_test(random_variables, n8)
		})
		}
		result_cochran1 <- c(result_cochran1, 1 - mean(Y))
		Y <- NA
		while (is.na(mean(Y))){
			Y <- sapply(1:10000, function(...){
				pi <- c(0.001 + 0.001*(j-1), 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
		random_variables <- c()
		for (i in 1:8){
			random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
		}
		modified_cochran(random_variables, n8)
		})
		}
		result_mod_cochran1 <- c(result_mod_cochran1, 1 - mean(Y))
		Y <- NA
		while (is.na(mean(Y))){
			Y <- sapply(1:10000, function(...){
				pi <- c(0.001 + 0.001*(j-1), 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
		random_variables <- c()
		for (i in 1:8){
			random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
		}
		T_new2(random_variables, n8)
		})
		}
		result_tnew21 <- c(result_tnew21, 1 - mean(Y))
	}
	
	
	df <- data.frame(seq(0.000, 0.009, by=0.001),
	result_cochran1, result_mod_cochran1, result_tnew21)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 3}
	\noindent$\pi_1=0.001+\delta$ i $\pi_i=0.001$ dla $2\leq i\leq8$, $k=8$, $n_i=2560$ dla $1\leq i\leq8$:
	<<echo=F, cache=TRUE>>=
	n <- rep(2560, 8)
	
	result_cochran2 <- c()
	result_mod_cochran2 <- c()
	result_tnew22 <- c()
	for (j in 1:10){
		Y <- NA
		while (is.na(mean(Y))){
			Y <- sapply(1:10000, function(...){
			pi <- c(0.001 + (j - 1) * 0.0005, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
			random_variables <- c()
			for (i in 1:8){
			random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
		}
		cochran_test(random_variables, n)
		})
		}
		result_cochran2 <- c(result_cochran2, 1 - mean(Y))
		Y <- NA
		while (is.na(mean(Y))){
			Y <- sapply(1:10000, function(...){
			pi <- c(0.001 + (j - 1) * 0.0005, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
			random_variables <- c()
			for (i in 1:8){
			random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
		}
		modified_cochran(random_variables, n)
		})
	}
	result_mod_cochran2 <- c(result_mod_cochran2, 1 - mean(Y))
			Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 + (j - 1) * 0.0005, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	random_variables <- c()
	for (i in 1:8){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	T_new2(random_variables, n)
	})
	}
	result_tnew22 <- c(result_tnew22, 1 - mean(Y))
	}
	
	df <- data.frame(seq(0.0000, 0.0045, by=0.0005),
	result_cochran2, result_mod_cochran2, result_tnew22)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 4}\label{section:setup4}
	\noindent$\pi_i=0.001$ dla $1\leq i \leq k-1$ and $\pi_k=0.001+\delta$, dla $k=40$\newline
	$\mathbf{n}_{40}=20(\mathbf{n}_1^*, \mathbf{n}_2^*, \mathbf{n}_3^*, \mathbf{n}_4^*, \mathbf{n}_5^*, \mathbf{n}_6^*, \mathbf{n}_7^*, \mathbf{n}_8^*)$, gdzie $\mathbf{n}_m^*=(2^m, 2^m, 2^m, 2^m, 2^m)$ to 5{\dywiz}wymiarowy wektor
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(rep(2, 5), rep(2^2, 5), rep(2^3, 5), rep(2^4, 5), 
	rep(2^5, 5), rep(2^6, 5), rep(2^7, 5), rep(2^8, 5))
	
	n <- rep(2560, 8)
	
	result_cochran3 <- c()
	result_mod_cochran3 <- c()
	result_tnew23 <- c()
	for (j in 1:10){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(rep(0.001, 39), 0.001 * j)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	cochran_test(random_variables, n8)
	})
	}
	result_cochran3 <- c(result_cochran3, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(rep(0.001, 39), 0.001 * j)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	modified_cochran(random_variables, n8)
	})
	}
	result_mod_cochran3 <- c(result_mod_cochran3, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(rep(0.001, 39), 0.001 * j)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	T_new2(random_variables, n8)
	})
	}
	result_tnew23 <- c(result_tnew23, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 0.009, by=0.001),
	result_cochran3, result_mod_cochran3, result_tnew23)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 5}
	\noindent$\pi_i=0.001+\delta$, dla $i=1$ i $\pi_i=0.001$ dla $2\leq i \leq k$ dla $k=40$ i $\mathbf{n}_{40}$ \pauza tak jak w (\ref{section:setup4}):
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(rep(2, 5), rep(2^2, 5), rep(2^3, 5), rep(2^4, 5), 
	rep(2^5, 5), rep(2^6, 5), rep(2^7, 5), rep(2^8, 5))
	
	n <- rep(2560, 8)
	
	result_cochran4 <- c()
	result_mod_cochran4 <- c()
	result_tnew24 <- c()
	for (j in 1:10){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	cochran_test(random_variables, n8)
	})
	}
	result_cochran4 <- c(result_cochran4, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	modified_cochran(random_variables, n8)
	})
	}
	result_mod_cochran4 <- c(result_mod_cochran4, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	T_new2(random_variables, n8)
	})
	}
	result_tnew24 <- c(result_tnew24, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 0.009, by=0.001),
	result_cochran4, result_mod_cochran4, result_tnew24)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 6}
	\noindent$\pi_i=0.001+\delta$, dla $k=1$ i $\pi_i=0.001$ dla $2\leq i \leq k$ dla $k=40$ i $n_i=2560$ dla $1\leq i\leq k$:
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(rep(2, 5), rep(2^2, 5), rep(2^3, 5), rep(2^4, 5), 
	rep(2^5, 5), rep(2^6, 5), rep(2^7, 5), rep(2^8, 5))
	
	n <- rep(2560, 40)
	
	result_cochran5 <- c()
	result_mod_cochran5 <- c()
	result_tnew25 <- c()
	for (j in 1:7){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	cochran_test(random_variables, n)
	})
	}
	result_cochran5 <- c(result_cochran5, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	modified_cochran(random_variables, n)
	})
	}
	result_mod_cochran5 <- c(result_mod_cochran5, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- c(0.001 * j, rep(0.001, 39))
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	T_new2(random_variables, n)
	})
	}
	result_tnew25 <- c(result_tnew25, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 0.006, by=0.001),
	result_cochran5, result_mod_cochran5, result_tnew25)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	
	@
	\subsection{Setup 7}
	\noindent$\pi_i=0.001(1+\epsilon_i)$, $k=40$, $n_i=2560$ dla $1\leq i\leq 40$, gdzie  $\epsilon_i$ jest równomiernie rozłożony na odcinku $[-\delta, \delta]$:
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(rep(2, 5), rep(2^2, 5), rep(2^3, 5), rep(2^4, 5), 
	rep(2^5, 5), rep(2^6, 5), rep(2^7, 5), rep(2^8, 5))
	
	n <- rep(2560, 40)
	
	result_cochran6 <- c()
	result_mod_cochran6 <- c()
	result_tnew26 <- c()
	for (j in 1:5){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.001*(1-0.25*(j-1)), 0.001*(1+0.25*(j-1)), length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	cochran_test(random_variables, n)
	})
	}
	result_cochran6 <- c(result_cochran6, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.001*(1-0.25*(j-1)), 0.001*(1+0.25*(j-1)), length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	modified_cochran(random_variables, n)
	})
	}
	result_mod_cochran6 <- c(result_mod_cochran6, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.001*(1-0.25*(j-1)), 0.001*(1+0.25*(j-1)), length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n[i], pi[i]))
	}
	T_new2(random_variables, n)
	})
	}
	result_tnew26 <- c(result_tnew26, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 1.01, by=0.25),
	result_cochran6, result_mod_cochran6, result_tnew26)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	
	@
	\subsection{Setup 8}
	\noindent$\pi_i=0.01(1+\epsilon_i)$, $k=40$ i $\mathbf{n}_{40}$ \pauza jak w (\ref{section:setup4}) oraz  $\epsilon_i$ jest równomiernie rozłożony na odcinku $[-\delta, \delta]$:
	<<echo=F, cache=TRUE>>=
	n8 <- 20*c(rep(2, 5), rep(2^2, 5), rep(2^3, 5), rep(2^4, 5), 
	rep(2^5, 5), rep(2^6, 5), rep(2^7, 5), rep(2^8, 5))
	
	n <- rep(2560, 40)
	
	result_cochran7 <- c()
	result_mod_cochran7 <- c()
	result_tnew27 <- c()
	for (j in 1:5){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.25*(j-1)), 0.01*(1+0.25*(j-1)),
	length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	cochran_test(random_variables, n8)
	})
	}
	result_cochran7 <- c(result_cochran7, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.25*(j-1)), 0.01*(1+0.25*(j-1)),
	length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	modified_cochran(random_variables, n8)
	})
	}
	result_mod_cochran7 <- c(result_mod_cochran7, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.25*(j-1)), 0.01*(1+0.25*(j-1)),
	length.out=40))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	for (i in 1:40){
	random_variables <- c(random_variables, rbinom(1, n8[i], pi[i]))
	}
	T_new2(random_variables, n8)
	})
	}
	result_tnew27 <- c(result_tnew27, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 1.01, by=0.25),
	result_cochran7, result_mod_cochran7, result_tnew27)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 9}
	\noindent$\pi_i=0.01(1+\epsilon_i)$, $k=2000$, $n_i=100$ dla $1\leq i\leq 2000$, gdzie  $\epsilon_i$ jest równomiernie rozłożony na odcinku $[-\delta, \delta]$:
	<<echo=F, cache=TRUE>>=
	n <- rep(100, 2000)
	
	result_cochran8 <- c()
	result_mod_cochran8 <- c()
	result_tnew28 <- c()
	for (j in 1:5){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	cochran_test(random_variables, n)
	})
	}
	result_cochran8 <- c(result_cochran8, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	modified_cochran(random_variables, n)
	})
	}
	result_mod_cochran8 <- c(result_mod_cochran8, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	T_new2(random_variables, n)
	})
	}
	result_tnew28 <- c(result_tnew28, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 0.81, by=0.2),
	result_cochran8, result_mod_cochran8, result_tnew28)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\subsection{Setup 10}
	\noindent$\pi_i=0.01(1+\epsilon_i)$, $k=2000$, $\mathbf{n}=(\mathbf{n}_{1, 250}, \mathbf{n}_{2, 250}, \dots, \mathbf{n}_{8, 250})$, gdzie $\mathbf{n}_{m, 250}=(2^m, 2^m, \dots, 2^m)$ jest 250{\dywiz}cio wymiarowym wektorem, $\epsilon_i$ jest równomiernie rozłożony na odcinku $[-\delta, \delta]$
	<<echo=F, cache=TRUE>>=
	n <- c(rep(2, 250), rep(2^2, 250), rep(2^3, 250), rep(2^4, 250), 
	rep(2^5, 250), rep(2^6, 250), rep(2^7, 250), rep(2^8, 250))
	
	result_cochran9 <- c()
	result_mod_cochran9 <- c()
	result_tnew29 <- c()
	for (j in 1:6){
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	cochran_test(random_variables, n)
	})
	}
	result_cochran9 <- c(result_cochran9, 1 - mean(Y))
	Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- c()
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	modified_cochran(random_variables, n)
	})
	}
	result_mod_cochran9 <- c(result_mod_cochran9, 1 - mean(Y))
		Y <- NA
	while (is.na(mean(Y))){
	Y <- sapply(1:10000, function(...){
	pi <- abs(seq(0.01*(1-0.2*(j-1)), 0.01*(1+0.2*(j-1)),
	length.out=2000))
	pi <- ifelse(pi>1, 1, pi)
	random_variables <- sapply(1:2000, function(i){
	rbinom(1, n[i], pi[i])
	})
	T_new2(random_variables, n)
	})
	}
	result_tnew29 <- c(result_tnew29, 1 - mean(Y))
	}
	
	# n8 <- rep(2560, 8)
	# pi <- c(0.003, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001)
	
	df <- data.frame(seq(0.000, 1.01, by=0.2),
	result_cochran9, result_mod_cochran9, result_tnew29)
	colnames(df) <- c("delta", "Test Cochrana", "Zmodyfikowany test Cochrana",
	"Test Tnew2")
	df
	@
	\section{Wnioski}
	Celem pracy było symulacyjne porównanie testu Cochrana, sprawdzającego jednorodność prawdopodobieństw sukcesu $n$ niezależnych zmiennych losowych z rozkładu dwumianowego. Liczba prób dla zmiennych losowych ($n$ w $\mathcal{B}(n, \pi)$) może być różna. W pracy skupiłem się na symulacyjnym porównaniu testu Cochrana z jego zmodyfikowaną wersją i jednym z nowych testów. W tym celu zaimplementowałem testy opracowane w artykule i przeprowadziłem 10 symulacji z artykułu (uzyskane wartości są wyznaczone na podstawie symulacji Monte{\dywiz}Carlo, na podstawie $10^4$ powtórzeń).\newline\noindent
	Symulacje pokazały, jak różnie reagują rozważane testy, na zmieniające się parametry. Pierwszy wiersz, w każdej przeprowadzonej symulacji opisuje prawdopodobieństwo popełnienia błędu pierwszego rodzaju \pauza czyli prawdopodobieństwo odrzucenia hipotezy zerowej, gdy jest ona prawdziwa. Wartość ta powinna wskazywać liczbę w przybliżeniu 0.05, ponieważ wykonywane testy były robione na poziomie istotności $\alpha=0.05$. Na podstawie przeprowadzonych symulacji, nie można jednoznacznie stwierdzić, który z testów jest najlepszy, każdy ma w zależności od rozważanych sytuacji swoje ,,mocniejsze'' i ,,słabsze'' strony.
\end{document}
